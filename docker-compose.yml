services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cmms-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    env_file:
      - .env
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    networks:
      - cmms-network
    healthcheck:
      test: ['CMD', 'php-fpm', '-t']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: cmms-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./public:/var/www/html/public
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      app:
        condition: service_healthy
    networks:
      - cmms-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    command: supervisord -c /etc/supervisor/conf.d/supervisord.conf
    env_file:
      - .env
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    networks:
      - cmms-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cmms-scheduler
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    command: php artisan schedule:work --verbose
    env_file:
      - .env
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
    depends_on:
      app:
        condition: service_healthy
    networks:
      - cmms-network

  redis:
    image: redis:7-alpine
    container_name: cmms-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - cmms-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  redis_data:

networks:
  cmms-network:
    driver: bridge
